---
name: test_code

# Triggers the workflow on push or pull request to dev branch, see test_docker.yml
on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Login to GitHub Packages
      uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: docker.pkg.github.com/edwardchalstrey1/seshat/tests-image:latest
  test_core:
    needs: build
    strategy:
      matrix:
        python-version: ['3.8']
        os: ['ubuntu-latest']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Login to GitHub Packages
      uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    - name: Pull and run Docker image
      run: |
        docker pull docker.pkg.github.com/edwardchalstrey1/seshat/tests-image:latest
        docker run -d -p 5432:5432 -v ${{ github.workspace }}:/seshat -e DJANGO_SETTINGS_MODULE=seshat.settings.local -e POSTGRES_PASSWORD=postgres -e PGDATA=/var/lib/postgresql/data/db-files/ --name seshat_testing docker.pkg.github.com/edwardchalstrey1/seshat/tests-image:latest
    - name: Increase max_locks_per_transaction
      run: |
        docker exec -it seshat_testing /bin/bash -c 'echo "max_locks_per_transaction = 256" >> /var/lib/postgresql/data/db-files/postgresql.conf'
    - name: Output Docker container logs
      run: |
        docker logs seshat_testing
    - name: docker ps
      run: |
        docker ps
    - name: Check postgres server logs
      run: |
        docker exec seshat_testing cat /var/log/postgresql/postgresql-16-main.log
    - name: Check postrgres is running
      run: |
        docker exec seshat_testing pg_isready
    - name: Check exit status
      run: |
        docker inspect --format='{{.State.ExitCode}}' seshat_testing
    - name: Check PostgreSQL connectivity
      run: |
        docker exec seshat_testing psql -h localhost -U postgres -c 'SELECT 1'
    - name: Run tests
      run: |
        docker exec seshat_testing python3 /seshat/manage.py test seshat.apps.core --keepdb
